{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","loading","setLoading","person","setPerson","title","setTitle","value","setValue","getPerson","a","fetch","response","json","data","results","email","phone","name","first","last","location","street","number","image","picture","large","age","dob","password","login","newPerson","useEffect","handleMouseOver","e","target","classList","contains","newValue","dataset","label","className","src","alt","onMouseOver","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOA6HeA,MAlHf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,QAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA0BN,mBAAS,iBAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAS,uCAAG,wDAAAC,EAAA,6DAChBR,GAAW,GADK,SAEOS,MAVf,8BAQQ,cAEVC,EAFU,gBAGGA,EAASC,OAHZ,OAGVC,EAHU,OAIVX,EAASW,EAAKC,QAAQ,GACpBC,EAAiBb,EAAjBa,MAAOC,EAAUd,EAAVc,MALC,EAMQd,EAAOe,KAAvBC,EANQ,EAMRA,MAAOC,EANC,EAMDA,KANC,EASZjB,EAAOkB,SADTC,OAAUJ,EARI,EAQJA,KAAMK,EARF,EAQEA,OAEHC,EAAUrB,EAAOsB,QAAxBC,MAECC,EACLxB,EADFyB,IAAOD,IAEDE,EAAa1B,EAAO2B,MAApBD,SAEFE,EAAY,CAChBJ,MACAX,QACAC,QACAO,QACAK,WACAX,KAAK,GAAD,OAAKC,EAAL,YAAcC,GAClBE,OAAO,GAAD,OAAKC,EAAL,YAAeL,IAEvBd,EAAU2B,GACV7B,GAAW,GACXI,EAAS,QACTE,EAASuB,EAAUb,MA5BH,4CAAH,qDA+Bfc,qBAAU,WACRvB,MACC,IAEH,IAAMwB,EAAkB,SAACC,GACvB,GAAIA,EAAEC,OAAOC,UAAUC,SAAS,QAAS,CACvC,IAAMC,EAAWJ,EAAEC,OAAOI,QAAQC,MAClClC,EAASgC,GACT9B,EAASL,EAAOmC,MAIpB,OACE,iCACE,qBAAKG,UAAU,oBACf,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBACEA,UAAU,WACVC,IAAMvC,GAAUA,EAAOqB,OAzDd,iDA0DTmB,IAAI,eAEN,oBAAGF,UAAU,aAAb,gBAA8BpC,EAA9B,SACA,mBAAGoC,UAAU,aAAb,SAA2BlC,IAC3B,sBAAKkC,UAAU,cAAf,UACE,wBACEA,UAAU,OACV,aAAW,OACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,MAEF,wBACEQ,UAAU,OACV,aAAW,QACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,MAEF,wBACEQ,UAAU,OACV,aAAW,MACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,MAEF,wBACEQ,UAAU,OACV,aAAW,SACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,MAEF,wBACEQ,UAAU,OACV,aAAW,QACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,MAEF,wBACEQ,UAAU,OACV,aAAW,WACXG,YAAaX,EAHf,SAKE,cAAC,IAAD,SAGJ,wBAAQQ,UAAU,MAAMI,KAAK,SAASC,QAASrC,EAA/C,SACGR,EAAU,aAAe,2BCzGvB8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c1a0cc8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  FaEnvelopeOpen,\n  FaUser,\n  FaCalendarTimes,\n  FaMap,\n  FaPhone,\n  FaLock,\n} from \"react-icons/fa\";\nconst url = \"https://randomuser.me/api/\";\nconst defaultImage = \"https://randomuser.me/api/portraits/men/75.jpg\";\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [person, setPerson] = useState(null);\n  const [title, setTitle] = useState(\"name\");\n  const [value, setValue] = useState(\"random person\");\n\n  const getPerson = async () => {\n    setLoading(true);\n    const response = await fetch(url);\n    const data = await response.json();\n    const person = data.results[0];\n    const { email, phone } = person;\n    const { first, last } = person.name;\n    const {\n      street: { name, number },\n    } = person.location;\n    const { large: image } = person.picture;\n    const {\n      dob: { age },\n    } = person;\n    const { password } = person.login;\n\n    const newPerson = {\n      age,\n      email,\n      phone,\n      image,\n      password,\n      name: `${first} ${last}`,\n      street: `${number} ${name}`,\n    };\n    setPerson(newPerson);\n    setLoading(false);\n    setTitle(\"name\");\n    setValue(newPerson.name);\n  };\n\n  useEffect(() => {\n    getPerson();\n  }, []);\n\n  const handleMouseOver = (e) => {\n    if (e.target.classList.contains(\"icon\")) {\n      const newValue = e.target.dataset.label;\n      setTitle(newValue);\n      setValue(person[newValue]);\n    }\n  };\n\n  return (\n    <main>\n      <div className=\"block bcg-black\"></div>\n      <div className=\"block\">\n        <div className=\"container\">\n          <img\n            className=\"user-img\"\n            src={(person && person.image) || defaultImage}\n            alt=\"randomUser\"\n          />\n          <p className=\"user-title\">my {title} is</p>\n          <p className=\"user-value\">{value}</p>\n          <div className=\"values-list\">\n            <button\n              className=\"icon\"\n              data-label=\"name\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaUser />\n            </button>\n            <button\n              className=\"icon\"\n              data-label=\"email\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaEnvelopeOpen />\n            </button>\n            <button\n              className=\"icon\"\n              data-label=\"age\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaCalendarTimes />\n            </button>\n            <button\n              className=\"icon\"\n              data-label=\"street\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaMap />\n            </button>\n            <button\n              className=\"icon\"\n              data-label=\"phone\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaPhone />\n            </button>\n            <button\n              className=\"icon\"\n              data-label=\"password\"\n              onMouseOver={handleMouseOver}\n            >\n              <FaLock />\n            </button>\n          </div>\n          <button className=\"btn\" type=\"button\" onClick={getPerson}>\n            {loading ? \"loading...\" : \"random person\"}\n          </button>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}